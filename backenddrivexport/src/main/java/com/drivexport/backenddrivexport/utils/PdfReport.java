package com.drivexport.backenddrivexport.utils;

import com.drivexport.backenddrivexport.model.Product;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class PdfReport {
    private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    private static final Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
    private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
    private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

    public void addTitlePage(Document document, String user_name, int isAdmin ) throws DocumentException {
        String datos_usuario = "";
        if(isAdmin == 1){
            datos_usuario += user_name + " " + "Administrador";
        }else {
            datos_usuario += user_name;
        }
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Drive X port", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Reporte generado por: " + datos_usuario + ", " + new Date()));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Reporte de inventario ", smallBold));
        addEmptyLine(preface, 2);
        preface.add(new Paragraph("El reporte contiene datos del inventario hasta le momento de creacion de este documento.", redFont));
        document.add(preface);
        // Start a new page
        document.newPage();
    }


    public void createContentTable(Document document, List<Product> content) throws DocumentException, SQLException, ParseException {
        Paragraph preface = new Paragraph();
        float cantidad_total = 0;
        int unidadades_totales = 0;
        PdfPTable table = new PdfPTable(5);

        PdfPCell c1 = new PdfPCell(new Phrase("Codigo producto"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Nombre Producto"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Existencia"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Precio Unitario"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Modificado"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);


        for ( Product product : content ){
            Integer codigo_producto = product.getProduct_code();
            String nombre_producto = product.getProduct_name();
            int cantidad_producto = product.getProduct_qty();
            float precio = product.getProduct_price();
            Date date = product.getCreatedAt();
            Date dateParsed = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(String.valueOf(date));
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
            String formattedDate = sdf.format(dateParsed);
            unidadades_totales += cantidad_producto;
            cantidad_total += (cantidad_producto * precio);
            table.addCell(String.valueOf(codigo_producto));
            table.addCell(nombre_producto);
            table.addCell(String.valueOf(cantidad_producto));
            table.addCell(String.valueOf(precio));
            table.addCell(formattedDate);
        }

        document.add(table);

        NumberFormat formatter = NumberFormat.getCurrencyInstance();
        String moneyString = formatter.format(cantidad_total);
        addEmptyLine(preface, 5);
        preface.add(new Paragraph("Total unidades " + unidadades_totales + "\nGran total: "+ moneyString));
        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
